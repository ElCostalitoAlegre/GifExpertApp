{"version":3,"sources":["components/CategoryAdd.js","services/gifAPIClient.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","alert","type","placeholder","value","onChange","target","getGifs","query","a","process","endPoint","url","fetch","res","json","data","gifs","map","id","title","downsized_medium","images","GifGridItem","className","src","alt","GifGrid","category","loading","state","setState","useEffect","encodeURI","then","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yLAsCeA,EAlCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAIDC,mBAAS,IAJR,mBAI9BC,EAJ8B,KAIlBC,EAJkB,KAqBrC,OACI,sBAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,KAEdO,MAAM,0CAMV,SACI,uBACIC,KAAK,OACLC,YAAY,qBACZC,MAAOX,EACPY,SArBc,SAAC,GAAD,IAAUD,EAAV,EAAEE,OAAQF,MAAV,OAAsBV,EAAcU,S,+BCTrDG,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,2DAChBD,EAAMV,OAAOC,OAAS,GADN,uBAECW,mCACVC,EAHS,UAGKD,gCAHL,WAITE,EAJS,UAIAD,EAJA,oBAECD,mCAFD,cAIiCF,EAJjC,sBAKGK,MAAMD,GALT,cAKTE,EALS,gBAMMA,EAAIC,OANV,uBAMRC,EANQ,EAMRA,KACDC,EAAOD,EAAKE,KAAK,YAA0C,IAAxCC,EAAuC,EAAvCA,GAAGC,EAAoC,EAApCA,MAAcC,EAAsB,EAA9BC,OAAQD,iBACtC,MAAO,CACHF,GAAIA,EACJC,MAAwB,KAAjBA,EAAMtB,OAAesB,EAAM,MAClCR,IAAG,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAkBT,QAXhB,kBAcRK,GAdQ,iCAgBR,IAhBQ,4CAAH,sDCULM,EATK,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMR,EAAS,EAATA,IAC3B,OACI,sBAAKY,UAAU,yCAAf,UACI,qBAAKC,IAAKb,EAAKc,IAAKN,IACpB,4BAAIA,QCiBDO,EAnBC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,ECAJ,SAACA,GAAa,IAAD,EAEXpC,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAgBrC,OATAC,qBAAW,WACPzB,EAAQ0B,UAAUL,IAAWM,MAC3B,SAAApB,GAAG,OAAIiB,EAAS,CACVf,KAAKF,EACLe,SAAQ,SAGhB,CAAED,IAECE,EDduBK,CAAaP,GAA/BN,EAFgB,EAErBN,KAAYa,EAFS,EAETA,QAEnB,OACI,qCACE,oBAAIL,UAAU,oCAAd,SAAmDI,IAClDC,GAAW,mBAAGL,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAEQF,EAAOJ,KAAK,SAACkB,GAAD,OACV,cAAC,EAAD,eAAgCA,GAAdA,EAAMjB,aEiB7BkB,EA5BM,WAAO,IAAD,EACa7C,mBAAS,IADtB,mBAChBQ,EADgB,KACJT,EADI,KAOvB,OACI,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEMS,EAAWkB,KAAI,SAAAU,GAAQ,OAEnB,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,Y,MChB7BU,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.29f4c875.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n//Componente padre GifExpertApp\r\nconst CategoryAdd = ({setCategories}) => {\r\n\r\n    //El inputValue vive en el state de la aplicación (recordar).\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    // e.target.value será el nuevo valor del input value\r\n    const handleInputChange = ({target:{value}}) => setInputValue(value);\r\n    \r\n    const handleSubmit = (e) =>{\r\n        //previene el refresh\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(categories => [inputValue,...categories] );\r\n            setInputValue('');\r\n        }else{\r\n            alert('Minimun Category length 2 is required')\r\n        }\r\n    \r\n    }\r\n    //El fragment agrupa los elementos html y no es necesario si hay una etiqueta que cumpla esta función (form)\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input  \r\n                type=\"text\" \r\n                placeholder=\"Type a category...\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nexport default CategoryAdd\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","\r\nexport const getGifs = async(query) => {\r\n    if(query.trim().length > 0){\r\n        const api_key = process.env.REACT_APP_api_key;\r\n        const endPoint = `${process.env.REACT_APP_giphyHost}/search`;\r\n        const url = `${endPoint}?api_key=${api_key}&q=${query}&limit=10`;\r\n        const res = await fetch(url);\r\n        const {data} = await res.json();\r\n        const gifs = data.map( ({id,title,images:{downsized_medium}}) =>{\r\n            return({\r\n                id: id,\r\n                title: title.trim() !== ''? title:'Gif',\r\n                url: downsized_medium?.url\r\n            })\r\n        });\r\n        return gifs;\r\n    }else{\r\n        return [];\r\n    }\r\n    \r\n    \r\n}\r\n \r\n","import React from 'react'\r\n\r\nconst GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    return (\r\n        <>\r\n          <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n          {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n          <div className=\"card-grid\">\r\n                {\r\n                  images.map( (image) => (\r\n                    <GifGridItem key={image.id} {...image} />\r\n                  ))\r\n                }\r\n          </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../services/gifAPIClient\";\r\n\r\n//Custom hook \r\nexport const useFetchGifs = (category) =>{\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    //los efectos no pueden ser async\r\n    useEffect( () =>{\r\n        getGifs(encodeURI(category)).then\r\n        ( res => setState({\r\n                data:res,\r\n                loading:false,\r\n            }\r\n        ));\r\n      },[ category ]); //si la categoria cambia se vuelve a aplicar el useEffect\r\n  \r\n    return state; // {data:[],loading:true}\r\n\r\n}","import React, { useState } from 'react'\r\nimport CategoryAdd from './CategoryAdd';\r\nimport GifGrid from './GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    //const handleAdd = (category) =>{\r\n        //setCategories(categories => [...categories,'category']);\r\n    //    setCategories([...categories,category]);\r\n    //}\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>\r\n          <CategoryAdd setCategories={setCategories}></CategoryAdd>\r\n          <hr/>\r\n          <ol>\r\n              { \r\n                categories.map(category => (\r\n                    //<li key={category}>{category}</li>\r\n                    <GifGrid\r\n                        key={category}\r\n                        category={category}>\r\n                        \r\n                    </GifGrid>)\r\n                ) \r\n              }\r\n          </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}